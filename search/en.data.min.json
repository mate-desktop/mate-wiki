[{"id":0,"href":"/mate-desktop/applications/atril/","title":"Atril - PDF Viewer","parent":"Applications","content":" Source Code | Bug Tracker | Dependencies\nAtril is the official Document Viewer of the MATE Desktop Environment, it is a simple multi-page document viewer. It can display and print PostScript (PS), Encapsulated PostScript (EPS), DJVU, DVI, XPS and Portable Document Format (PDF) files.\nWhen supported by the document, it also allows searching for text, copying text to the clipboard, hypertext navigation, and table-of-contents bookmarks.\nMore ↕ SYNTAX\natril [OPTIONS...] [FILES...] OPTIONS\nfilename(s)... Specifies the file to open when atril starts. If this is not specified, atril will start with a blank window and you may open a file from the menu or by using the shortcut CTRL+O. Multiple files can be loaded if they are separated by spaces. atril also supports handling of remote files. -p, --page-label=PAGE Here you can specify a page label, this page will be selected in the document if it exists. -i, --page-index=NUMBER Here you can specify a page number, this page will be selected in the document if it exists. -f, --fullscreen Start atril in fullscreen mode. You must specify a document to start in fullscreen mode. -s, --presentation Start atril in presentation mode. You must specify a document to start in presentation mode. -w, --preview Start atril in preview mode. You must specify a document to start in preview mode. --display=DISPLAY X display to use. --version Output version information and exit. -?, -h, --help Print standard command line options. --help-all Print all command line options. This program also accepts the standard GTK options. Build / Install Simple build procedure:\n$ git submodule update --init --recursive # Init Git submodules $ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nAtril is the official Document Viewer of the MATE Desktop Environment, it is a simple multi-page document viewer. It can display and print PostScript (PS), Encapsulated PostScript (EPS), DJVU, DVI, XPS and Portable Document Format (PDF) files.\nWhen supported by the document, it also allows searching for text, copying text to the clipboard, hypertext navigation, and table-of-contents bookmarks.\n"},{"id":1,"href":"/mate-desktop/applications/caja/","title":"Caja - File Manager","parent":"Applications","content":" Source Code | Bug Tracker | Dependencies\nCaja is the default file manager for the MATE Desktop Environment. It makes it easy to manage, manipulate, and customize files and directories. Caja can access local and remote filesystems such as SSH, FTP, and WebDav (HTTP/HTTPS).\nCaja also provides the desktop background and the icons it uses for launching links and applications, as well as accessing files, directories, the trash, and removable media like CD/DVD/BD and USB drives.\nMore ↕ SYNOPSIS\ncaja [OPTIONS...] [URI...] OPTIONS\n--browser Open a browser window. -c, --check Perform a quick set of self-check tests. --display=DISPLAY X display to use. -g, --geometry=GEOMETRY Create the initial window with the given geometry. -t, --tabs Open URIs in tabs. -n, --no-default-window Only create windows for explicitly specified URIs. --no-desktop Do not manage the desktop (ignore the preference set in the preferences dialog). --force-desktop Manage the desktop regardless of set preferences or environment (on new startup only) -q, --quit Quit Caja. --version Print current version information and exit. -?, -h, --help Print standard command line options. --help-all Print all command line options. This program also accepts the standard GTK options. Build / Install Simple build procedure:\n$ git submodule update --init --recursive # Init Git submodules $ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nCaja is the default file manager for the MATE Desktop Environment. It makes it easy to manage, manipulate, and customize files and directories. Caja can access local and remote filesystems such as SSH, FTP, and WebDav (HTTP/HTTPS).\nCaja also provides the desktop background and the icons it uses for launching links and applications, as well as accessing files, directories, the trash, and removable media like CD/DVD/BD and USB drives.\n"},{"id":2,"href":"/mate-desktop/components/caja-actions/","title":"caja-actions","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n"},{"id":3,"href":"/mate-desktop/components/caja-extensions/","title":"caja-extensions","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n"},{"id":4,"href":"/mate-desktop/applications/engrampa/","title":"Engrampa - File Archiver","parent":"Applications","content":" Source Code | Bug Tracker | Dependencies\nEngrampa is the official archive manager for the MATE Desktop Environment, it is a graphical front-end to archiving utilities such as tar and zip. It is a fork of File Roller.\nEngrampa supports most common operations such as creating, modifying and extracting files from an archive. You can also view the contents of an archive and open files contained within the archive.\nMore ↕ SYNOPSIS\nengrampa [OPTIONS...] [FILES...] OPTIONS\nfilename(s)... Specifies the archive file to open when engrampa starts. If this is not speci‐ fied, engrampa will start with a blank window and you may open an archive from the menu or by using the shortcut CTRL+O. -a, --add-to=ARCHIVE Add files to the specified archive and quit the program -d, --add FILE Add files asking the name of the archive and quit the program -e, --extract-to=FOLDER Extract archives to the specified folder and quit the program -f, --extract Extract archives asking the destination folder and quit the program -h, --extract-here Extract archives using the archive name as destination folder and quit the pro‐ gram --default-dir=FOLDER Default folder to use for the '--add' and '--extract' commands --force Create destination folder without asking confirmation --display=DISPLAY X display to use. -?, --help Print standard command line options. --help-all Print all command line options. --version Show the application's version. This program also accepts the standard GTK options. Build / Install Simple build procedure:\n$ git submodule update --init --recursive # Init Git submodules $ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nEngrampa is the official archive manager for the MATE Desktop Environment, it is a graphical front-end to archiving utilities such as tar and zip. It is a fork of File Roller.\nEngrampa supports most common operations such as creating, modifying and extracting files from an archive. You can also view the contents of an archive and open files contained within the archive.\n"},{"id":5,"href":"/mate-desktop/applications/eom/","title":"EoM - Image Viewer","parent":"Applications","content":" Source Code | Bug Tracker | Dependencies\neom or the Eye of MATE is the official image viewer for the MATE Desktop Environment. It aims to be simplistic, lightweight, and easy to use. The Eye of MATE may also be used to perform basic tasks like image flipping and rotation.\nEye of MATE features a flexible plugin system which can be used to dynamically add new advanced features to eom itself. eom uses the gdk-pixbuf library, it can handle large images, zoom, and scroll with low memory usage.\nMore ↕ SYNOPSIS\neom [--fullscreen] [--disable-image-collection] [--slide-show] [--new instance] [FILES...] OPTIONS\nfilename(s)... Specifies the image to open when eom starts. If this is not specified, eom will start with a blank window and you may open a file from the menu or by using the shortcut CTRL+O. eom also supports handling of remote files. --display=DISPLAY X display to use. -f, --fullscreen Start eom in fullscreen mode. -c, --disable-image-collection Disable image collection viewer. -s, --slide-show Open in slideshow mode. -n, --new-instance Start a new instance instead of reusing an existing window. --version Output version information and exit. -h, --help Print standard command line options. --help-all Print all command line options. This program also accepts the standard GTK options. Build / Install Simple build procedure:\n$ git submodule update --init --recursive # Init Git submodules $ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\neom or the Eye of MATE is the official image viewer for the MATE Desktop Environment. It aims to be simplistic, lightweight, and easy to use. The Eye of MATE may also be used to perform basic tasks like image flipping and rotation.\n"},{"id":6,"href":"/contributing/artwork-and-themes/getting-started/","title":"Getting Started","parent":"Artwork and Themes","content":"This page tells you how to get started with creating artwork and themes for the MATE Desktop Environment.\nCreating Wallpapers Creating Themes Creating Wallpapers Wallpapers should be relaxing to look at; some people use there computer for long periods of time. The wallpaper therefore should not distract them from whatever they are doing. It is always nice to have some MATE branded wallpapers. There are several great open-source tools to assist you in making things look nice:\nGimp (raster graphics editor used for image manipulation and image editing) Inkscape (vector graphics editor used to create vector images) Creating Themes The MATE Desktop uses the GTK+ 3 graphical toolkit.\nMATE has evolved from GNOME 2, but some design principles that we follow are still roughly based on the GNOME Human Interface Guidelines 2.2.1:\nGnome Human Interface Guidelines 2.2.1 ","description":"This page tells you how to get started with creating artwork and themes for the MATE Desktop Environment.\nCreating Wallpapers Creating Themes Creating Wallpapers Wallpapers should be relaxing to look at; some people use there computer for long periods of time. The wallpaper therefore should not distract them from whatever they are doing. It is always nice to have some MATE branded wallpapers. There are several great open-source tools to assist you in making things look nice:\n"},{"id":7,"href":"/contributing/software-development/getting-started/","title":"Getting Started","parent":"Software Development","content":"We assume you to have basic coding knowledge. If you don\u0026rsquo;t, we recommend that you read the chapters Introduction, Beginning C and Intermediate C of the C Wikibook and make some exercises (or something equivalent).\nThe MATE Desktop is mostly written in C. Some projects are written in Python or C++.\nYou should already have a text editor like Pluma, Gedit or Kate and a terminal application like MATE Terminal installed. Alternatively you could use a fully featured IDE such as VSCodium, Eclipse or Code::Blocks.\nIf you never developed a big application in a team before, your basic workflow was probably like this: You edited some source (.c, .cpp, .py) files and maybe some header files (.h, .hpp), compiled them (probably using gcc my-program or hitting the compile button in your IDE) and finally executed your program (with ./my-program or python3 my-program or hitting the run button on your IDE).\nIn the following we shortly explain some tools, that are generally used by larger software projects (i.e. by the MATE Desktop) that ease the developing process.\nMakefiles Git Github Virtualisation Makefiles MATE packages usually are a lot bigger than just a handful of source files. In addition to (usually \u0026gt;30) source files, they include language files, settings files, desktop files, help files and so on. Compiling a MATE application with the above approach would be very tedious: All source files would be recompiled even if you only edited one. Also, if you lose the compile command or switch computers you have to retype it from scratch. This is why Makefiles were introduced. A Makefile is basically a text file, which consists of rules which tell the compiler how to do its job.\nNote Makefile Tutorial: https://cs.colby.edu/maxwell/courses/tutorials/maketutor/ Git Git is software for tracking changes in any set of files, usually used for coordinating work among programmers collaboratively developing source code during software development. Its goals include speed, data integrity, and support for distributed, non-linear workflows (thousands of parallel branches running on different systems).\nNote gittutorial - A tutorial introduction to Git: https://git-scm.com/docs/gittutorial\ngiteveryday - A useful minimum set of commands for Everyday Git: https://git-scm.com/docs/giteveryday\nGit Cheat Sheet: https://training.github.com/downloads/github-git-cheat-sheet/\nGithub Github is the place where we host our Git repositories. If you want to contribute to the MATE Desktop Environment you will need to create a free account at Github.\nNote Github Docs - Collaborating with pull requests: https://docs.github.com/en/github/collaborating-with-pull-requests Virtualisation If you need to rely on a stable system you can do MATE development in a safe environment, for example by using virtualisation. You can use a virtualisation application such as GNOME Boxes or VirtualBox and setup a virtual machine by installing a distribution specifically for developing MATE applications.\nNote Help for GNOME Boxes: https://help.gnome.org/users/gnome-boxes/stable/\nUser Manual for VirtualBox: https://www.virtualbox.org/manual/UserManual.html#intro-running\n","description":"We assume you to have basic coding knowledge. If you don\u0026rsquo;t, we recommend that you read the chapters Introduction, Beginning C and Intermediate C of the C Wikibook and make some exercises (or something equivalent).\nThe MATE Desktop is mostly written in C. Some projects are written in Python or C++.\nYou should already have a text editor like Pluma, Gedit or Kate and a terminal application like MATE Terminal installed. Alternatively you could use a fully featured IDE such as VSCodium, Eclipse or Code::Blocks.\n"},{"id":8,"href":"/contributing/translation/getting-started/","title":"Getting Started","parent":"Translation","content":" Initial Setup We use Transifex for translating the MATE Desktop into several languages.\nNote Transifex is a proprietary, web-based translation platform; that is to say, it is a globalization management system (GMS). It targets technical projects with frequently updated content, such as software, documentation, and websites, and encourages the automation of the localization workflow by integrating with the tools used by developers. source How to help translating:\nRegister for a free account at https://www.transifex.com/signup/.\nOpen our project page https://www.transifex.com/projects/p/MATE/.\nChoose the language team you’d like to join.\n","description":" Initial Setup We use Transifex for translating the MATE Desktop into several languages.\nNote Transifex is a proprietary, web-based translation platform; that is to say, it is a globalization management system (GMS). It targets technical projects with frequently updated content, such as software, documentation, and websites, and encourages the automation of the localization workflow by integrating with the tools used by developers. source How to help translating:\n"},{"id":9,"href":"/introduction/installation/","title":"Installation","parent":"Introduction","content":"This page describes how to install the MATE Desktop Environment.\nPreinstalled Linux BSD Illumos Manual installation Preinstalled We recommend to use a distribution that already comes with the MATE Desktop pre-installed, such as (but not limited to):\nLinux Fedora MATE-Compiz Spin Ubuntu MATE Linux Mint - MATE Debian: In the net-install installer choose the \u0026ldquo;Mate Desktop Environment\u0026rdquo; option. Alternatively you can use a live install image (scroll down and choose the iso file with \u0026ldquo;mate\u0026rdquo; in its name). Manjaro MATE Community Edition Solus If you already have a Linux distribution installed and want to switch to the MATE Desktop without reinstalling everything, this is still possible. Almost every distribution include the MATE Desktop in their official repositories.\nBSD GhostBSD: A simple desktop-oriented operating system based on FreeBSD with MATE. Illumos openIndiana Manual installation We now describe how to install the MATE Desktop manually from the official repositories of your distribution. The manual install is useful, if you have a distribution without a graphical interface and decided to use the MATE Desktop.\nNote Manual install\nIf you already have a Desktop Environment installed (like Gnome, KDE, \u0026hellip;) and install MATE on top of that, there can be conflicting programs (window manager, screensaver, control centre, \u0026hellip;). You can try to remove the old Desktop Environment, but keep in mind that this is not the recommended way to get the best MATE experience. Debian/Ubuntu/Linux Mint Install the MATE Desktop Environment with\nsudo apt install mate-desktop-environment If you want some extras (such as a menu-editor) you can replace the above command with\nsudo apt install mate-desktop-environment-extras You can still install the extras later on if you are not sure about it right now.\nIf you do not have a desktop environment installed already you might want to install a graphical display manager.\nFor example you can use LightDM:\nsudo apt install lightdm lightdm-gtk-greeter After rebooting you should be able to login to the MATE Desktop.\nIf you do not want a display manager, you can add mate-session to ~/.xinitrc file.\nexec ck-launch-session mate-session Now can type startx.\nNote If you have authorization problems (e.g. when mounting disks), try adding dbus-launch after ck-launch-session. Fedora Install the MATE Desktop Environment with\nsudo dnf groupinstall \u0026quot;Mate Desktop\u0026quot; Arch/Manjaro Install the MATE Desktop Environment with\nsudo pacman -Sy mate mate-extra Solus Install the MATE Desktop Environment with\nsudo eopkg it -c desktop.mate ","description":"This page describes how to install the MATE Desktop Environment.\nPreinstalled Linux BSD Illumos Manual installation Preinstalled We recommend to use a distribution that already comes with the MATE Desktop pre-installed, such as (but not limited to):\nLinux Fedora MATE-Compiz Spin Ubuntu MATE Linux Mint - MATE Debian: In the net-install installer choose the \u0026ldquo;Mate Desktop Environment\u0026rdquo; option. Alternatively you can use a live install image (scroll down and choose the iso file with \u0026ldquo;mate\u0026rdquo; in its name). Manjaro MATE Community Edition Solus If you already have a Linux distribution installed and want to switch to the MATE Desktop without reinstalling everything, this is still possible. Almost every distribution include the MATE Desktop in their official repositories.\n"},{"id":10,"href":"/introduction/","title":"Introduction","parent":"Welcome to the documentation","content":"","description":""},{"id":11,"href":"/mate-desktop/libraries/libmatekbd/","title":"libmatekbd","parent":"Libraries","content":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n"},{"id":12,"href":"/mate-desktop/libraries/libmatemixer/","title":"libmatemixer","parent":"Libraries","content":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n"},{"id":13,"href":"/mate-desktop/libraries/libmateweather/","title":"libmateweather","parent":"Libraries","content":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n"},{"id":14,"href":"/mate-desktop/components/marco/","title":"marco - Window Manager","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nMarco is a minimal X window manager that uses GTK+ for drawing window frames. It is aimed at non-technical users and is designed to integrate well with the MATE desktop. Marco is a plain window manager for the adult in you; Many window managers are like Marshmallow Froot Loops, Marco is like Cheerios. It lacks some features that may be expected by traditional UNIX or other technical users; these users may want to investigate other available window managers for use with MATE or as a standalone window manager.\nMarco supports several somewhat advanced but common features such as Window Shading/Roll-Up, Window/Edge Snapping, Vertical and Horizontal Maximize, Always-On-Top, Sloppy/Mouse Focus and Raising, and many more\u0026hellip; Well, not a lot, but some more.\nMore ↕ SYNOPSIS\nmarco [OPTIONS] OPTIONS\n-d, --display=DISPLAY X display to use. --sync Make X calls synchronous. --replace Replace the currently running window manager with Marco. --sm-disable Disable the connection to the session manager. --sm-client-id=ID Specify a session management ID. --sm-save-file=FILENAME Restore from a session management savefile. If no path is specified marco will look in ~/.config/mate-ses‐ sion/saved-session/ -c, --composite Turn compositing ON. You may also use this option to start marco with composite \u0026quot;true transparency\u0026quot; effects. --no-composite Turn compositing OFF. You may also use this option to start marco without compositing effects. --no-force-fullscreen Do not create fullscreen windows without decorations. --version Print current version information and exit. -?, -h, --help Print standard command line options. Build / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nMarco is a minimal X window manager that uses GTK+ for drawing window frames. It is aimed at non-technical users and is designed to integrate well with the MATE desktop. Marco is a plain window manager for the adult in you; Many window managers are like Marshmallow Froot Loops, Marco is like Cheerios. It lacks some features that may be expected by traditional UNIX or other technical users; these users may want to investigate other available window managers for use with MATE or as a standalone window manager.\n"},{"id":15,"href":"/mate-desktop/applications/mate-calc/","title":"MATE Calculator","parent":"Applications","content":" Source Code | Bug Tracker | Dependencies\nmate-calc is the official calculator for the MATE Desktop Environment. It has been designed to be used with either the mouse or the keyboard. It is visually similar to a lot of hand-held calculators. More ↕ SYNOPSIS\nmate-calc [OPTIONS...] [FILES...] OPTIONS\n-s, --solve \u0026lt;equation\u0026gt; Solve the equation provided following this option. --version Output version information and exit. -h, -?, --help Print standard command line options. --help-all Print all command line options. This program also accepts the standard GTK options. Build / Install Meson\nSimple build procedure:\n$ meson build --prefix=/usr # Build configuration $ cd build $ ninja # Build After building the package you may install it:\n[ Become root if necessary ] $ ninja install # Installation Autotools\nSimple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nmate-calc is the official calculator for the MATE Desktop Environment. It has been designed to be used with either the mouse or the keyboard. It is visually similar to a lot of hand-held calculators. More ↕ SYNOPSIS\n"},{"id":16,"href":"/mate-desktop/applications/mate-control-center/","title":"MATE Control Center","parent":"Applications","content":" Source Code | Bug Tracker | Dependencies\nmate-control-center is a graphical user interface to configure various aspects of MATE.\nWhen run without arguments, the shell displays the control center overview, which shows all available configuration panels. The overview allows one to open individual panels by clicking on them. It also has a search entry to find panels by searching keywords.\nMore ↕ SYNOPSIS\nmate-control-center [OPTION...] OPTIONS\n-?, --help Print the application's help options and exit. --help-gtk Print GTK help options and exit. --help-all Print application and GTK help options and exit. --hide Hide on start (useful for preloading the shell). --display=DISPLAY X display to use. This program additionally accepts the standard MATE and GTK options (as listed with --help-gtk) Build / Install Simple build procedure:\n$ git submodule update --init --recursive # Init Git submodules $ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nmate-control-center is a graphical user interface to configure various aspects of MATE.\nWhen run without arguments, the shell displays the control center overview, which shows all available configuration panels. The overview allows one to open individual panels by clicking on them. It also has a search entry to find panels by searching keywords.\n"},{"id":17,"href":"/mate-desktop/applications/mate-system-monitor/","title":"MATE System Monitor","parent":"Applications","content":" Source Code | Bug Tracker | Dependencies\nThe mate-system-monitor allows you to view and control the processes running on your system. You can access detailed memory maps, send signals, and terminate the processes.\nIn addition, the mate-system-monitor provides an overall view of the resource usage on your system, including memory and CPU allocation, as well as network usage. It also allows you to view file system information such as Device, Type, Mountpoints, and Disk Usage.\nThe System tab will display basic information about your system like Hostname, Kernel, MATE Version, Installed Memory, and Processor Information.\nMore ↕ SYNOPSIS\nmate-system-monitor [OPTIONS] OPTIONS\nThis program accepts all the standard MATE and GTK+ options, which follow the usual GNU command line syntax, with long options starting with two dashes ('-'). In addition to those standard MATE options, the mate-system-monitor accepts the following options: -s, --show-system-tab Show the System tab. -?, -h, --help Print standard command line options. Build / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nThe mate-system-monitor allows you to view and control the processes running on your system. You can access detailed memory maps, send signals, and terminate the processes.\nIn addition, the mate-system-monitor provides an overall view of the resource usage on your system, including memory and CPU allocation, as well as network usage. It also allows you to view file system information such as Device, Type, Mountpoints, and Disk Usage.\n"},{"id":18,"href":"/mate-desktop/applications/mate-terminal/","title":"MATE Terminal","parent":"Applications","content":" Source Code | Bug Tracker | Dependencies\nMate Terminal is the official terminal emulator for the MATE Desktop. More ↕ Usage:\nmate-terminal [OPTION...] Help Options:\n-h, --help Show help options --help-all Show all help options --help-terminal Show terminal options --help-window-options Show per-window options --help-terminal-options Show per-terminal options --help-gtk Show GTK+ Options --help-sm-client Show session management options Options to open new windows or terminal tabs; more than one of these may be specified:\n--window Open a new window containing a tab with the default profile --tab Open a new tab in the last-opened window with the default profile Window options; if used before the first \u0026ndash;window or \u0026ndash;tab argument, sets the default for all windows:\n--show-menubar Turn on the menubar --hide-menubar Turn off the menubar --maximize Maximize the window --full-screen Full-screen the window --geometry=GEOMETRY Set the window size; for example: 80x24, or 80x24+200+200 (COLSxROWS+X+Y) --role=ROLE Set the window role --active Set the last specified tab as the active one in its window Terminal options; if used before the first \u0026ndash;window or \u0026ndash;tab argument, sets the default for all terminals:\n-e, --command Execute the argument to this option inside the terminal -x, --execute Execute the remainder of the command line inside the terminal --profile=PROFILE-NAME Use the given profile instead of the default profile -t, --title=TITLE Set the terminal title --working-directory=DIRNAME Set the working directory --zoom=ZOOM Set the terminal's zoom factor (1.0 = normal size) GTK+ Options --class=CLASS Program class as used by the window manager --name=NAME Program name as used by the window manager --screen=SCREEN X screen to use --sync Make X calls synchronous --gtk-module=MODULES Load additional GTK+ modules --g-fatal-warnings Make all warnings fatal Session management options:\n--sm-client-disable Disable connection to session manager --sm-client-state-file=FILE Specify file containing saved configuration --sm-client-id=ID Specify session management ID Application Options:\n--disable-factory Do not register with the activation nameserver, do not re-use an active terminal Build / Install Meson\nSimple build procedure:\n$ meson build --prefix=/usr # Build configuration $ cd build $ ninja # Build After building the package you may install it:\n[ Become root if necessary ] $ ninja install # Installation Autotools\nSimple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nMate Terminal is the official terminal emulator for the MATE Desktop. More ↕ Usage:\nmate-terminal [OPTION...] Help Options:\n-h, --help Show help options --help-all Show all help options --help-terminal Show terminal options --help-window-options Show per-window options --help-terminal-options Show per-terminal options --help-gtk Show GTK+ Options --help-sm-client Show session management options Options to open new windows or terminal tabs; more than one of these may be specified:\n"},{"id":19,"href":"/mate-desktop/components/mate-applets/","title":"mate-applets","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nmate-applets contains applets for use with the MATE panel.\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nmate-applets contains applets for use with the MATE panel.\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n"},{"id":20,"href":"/mate-desktop/components/mate-desktop/","title":"mate-desktop","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n"},{"id":21,"href":"/mate-desktop/components/mate-indicator-applet/","title":"mate-indicator-applet","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nmate-indicator-applet is a small applet to display information from various applications consistently in the panel. The indicator applet exposes Ayatana Indicators in the MATE Panel. Ayatana Indicators are an initiative by Canonical to provide crisp and clean system and application status indication. They take the form of an icon and associated menu, displayed (usually) in the desktop panel. Existing indicators include the Message Menu, Battery Menu and Sound menu.\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nmate-indicator-applet is a small applet to display information from various applications consistently in the panel. The indicator applet exposes Ayatana Indicators in the MATE Panel. Ayatana Indicators are an initiative by Canonical to provide crisp and clean system and application status indication. They take the form of an icon and associated menu, displayed (usually) in the desktop panel. Existing indicators include the Message Menu, Battery Menu and Sound menu.\n"},{"id":22,"href":"/mate-desktop/components/mate-media/","title":"mate-media","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n"},{"id":23,"href":"/mate-desktop/components/mate-menus/","title":"mate-menus","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n"},{"id":24,"href":"/mate-desktop/components/mate-netbook/","title":"mate-netbook","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n"},{"id":25,"href":"/mate-desktop/components/mate-notification-daemon/","title":"mate-notification-daemon","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n"},{"id":26,"href":"/mate-desktop/components/mate-panel/","title":"mate-panel","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nThe mate-panel program provides the panels for the the MATE Desktop Environment. It is the area on your desktop from which you can run applications and applets, and perform other tasks. New applets may also be installed ,added to, or removed from the panels.\nBy default, mate-panel typically creates a panel on the top of the screen with applets such as a Menu Bar, Notification Area, and Clock; While creating a second panel on the bottom of the screen with a Window List and a Workspace Switcher. Panels can be created, deleted, moved around the desktop, and to other monitors.\nMore ↕ SYNOPSIS\nmate-panel [OPTIONS] OPTIONS\n--replace Replace a currently running instance of mate-panel. --reset Reset the panel configuration to the default setting. --run-dialog Open the \u0026quot;Run Application\u0026quot; dialog, also accessible by pressing ALT+F2. --display=DISPLAY X display to use. -?, -h, --help Print standard command line options. --help-all Print all command line options. This program also accepts the standard GTK options. Build / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nThe mate-panel program provides the panels for the the MATE Desktop Environment. It is the area on your desktop from which you can run applications and applets, and perform other tasks. New applets may also be installed ,added to, or removed from the panels.\nBy default, mate-panel typically creates a panel on the top of the screen with applets such as a Menu Bar, Notification Area, and Clock; While creating a second panel on the bottom of the screen with a Window List and a Workspace Switcher. Panels can be created, deleted, moved around the desktop, and to other monitors.\n"},{"id":27,"href":"/mate-desktop/components/mate-polkit/","title":"mate-polkit","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n"},{"id":28,"href":"/mate-desktop/components/mate-screensaver/","title":"mate-screensaver","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n"},{"id":29,"href":"/mate-desktop/components/mate-sensors-applet/","title":"mate-sensors-applet","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n"},{"id":30,"href":"/mate-desktop/components/mate-session-manager/","title":"mate-session-manager","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n"},{"id":31,"href":"/mate-desktop/components/mate-settings-daemon/","title":"mate-settings-daemon","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n"},{"id":32,"href":"/mate-desktop/components/mate-utils/","title":"mate-utils","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n"},{"id":33,"href":"/mate-desktop/applications/mozo/","title":"Mozo - Menu Editor","parent":"Applications","content":" Source Code | Bug Tracker | Dependencies\nMozo is a menu editor for MATE using the freedesktop.org menu specification. It is a fork of Alacarte. More ↕ SYNOPSIS\nmozo Build / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nMozo is a menu editor for MATE using the freedesktop.org menu specification. It is a fork of Alacarte. More ↕ SYNOPSIS\nmozo Build / Install Simple build procedure:\n"},{"id":34,"href":"/mate-desktop/applications/pluma/","title":"Pluma - Text Editor","parent":"Applications","content":" Source Code | Bug Tracker | Dependencies\nPluma, Spanish for \u0026lsquo;quill\u0026rsquo;, is the official text editor of the MATE desktop environment. While aiming at simplicity and ease of use, Pluma is a powerful general purpose text editor. It can be used to create and edit all sorts of text files.\nPluma features a flexible plugin system which can be used to dynamically add new advanced features to Pluma itself.\nUser documentation There is no user documentation currently for Pluma. The basic features are similar to those of Gedit (https://help.gnome.org/users/gedit/stable/), although the user interface design is different.\nFind-and-replace The find-and-replace feature in Pluma includes support for regular expressions. This feature is implemented using the PCRE library. Documentation on the regular expression syntax is provided at https://perldoc.perl.org/perlre.\nCommand-line use If invoking Pluma from the command line (ie terminal window), a number of command-line options can be provided that alter Pluma\u0026rsquo;s behaviour. See man pluma for details, or see below.\nMore ↕ SYNOPSIS\npluma [OPTIONS...] [FILES...] OPTIONS\nfilename(s)... Specifies the file to open when pluma starts. If this is not specified, pluma will start a new, blank file with an \u0026quot;Unsaved Document\u0026quot; label. Multiple files can be loaded if they are separated by spaces. pluma also supports handling of remote files. --display=DISPLAY X display to use. --encoding Set the character encoding to be used for opening the files listed on the com‐ mand line. --new-window Create a new toplevel window in an existing instance of pluma. --new-document Create a new document in an existing instance of pluma, on the last Pluma window that had focus. +[num] For the first file, go to the line specified by \u0026quot;num\u0026quot; (do not insert a space be‐ tween the \u0026quot;+\u0026quot; sign and the number). If \u0026quot;num\u0026quot; is missing, go to the last line. --list-encodings Display list of possible values for the encoding option and exit --version Output version information and exit -?, -h, --help Print standard command line options. --help-all Print all command line options. This program also accepts the standard GTK options. Build / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nPluma, Spanish for \u0026lsquo;quill\u0026rsquo;, is the official text editor of the MATE desktop environment. While aiming at simplicity and ease of use, Pluma is a powerful general purpose text editor. It can be used to create and edit all sorts of text files.\n"},{"id":35,"href":"/mate-desktop/components/pluma-plugins/","title":"pluma-plugins","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n"},{"id":36,"href":"/mate-desktop/components/python-caja/","title":"python-caja","parent":"Components","content":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n[ Become root if necessary ] $ make install # Installation ","description":" Source Code | Bug Tracker | Dependencies\nBuild / Install Simple build procedure:\n$ ./autogen.sh --prefix=/usr # Build configuration $ make # Build For installation to a separate prefix change the above ./autogen.sh command to:\n$ ./autogen.sh --prefix=/an/other/path After building the package you may install it:\n"},{"id":37,"href":"/developers-corner/roadmap/","title":"Roadmap","parent":"Developers Corner","content":" Package specific tasks This are some package specific tasks for future releases:\nPackage Name Task Link caja add option to drag a tab to create a new window #454 caja add option to turn off generic icons in listview #26 caja Update caja integration with tracker search engine tracker dev documentation - Nautilus git log engrampa add libarchive support #52 libmatekbd Consider dropping libmatekbd for libgnomekbd libmateweather Consider dropping libmateweather for libgweather mate-applets add mount point or device blacklist for drivemount applet #24 mate-applets option to show several cores and processors in one cpufreq applet instance #50 mate-applets make cpufreq applet work with intel_pstate driver #173 mate-control-center cache thumbnails for desktop backgrounds in appearance properties mate-menus option to enable/disable preferences categories #35 mate-session-manager in properties dialog, show running apps that can/will be saved on exit #113 pluma add plugin to show (and maybe change) line endings type #50 General Tasks This are some general tasks for future releases, that are not specific to a certain package:\nTask Link Add support for AccountsService Complete support for systemd-logind Add support for Wayland Add support for the meson build system ","description":" Package specific tasks This are some package specific tasks for future releases:\nPackage Name Task Link caja add option to drag a tab to create a new window #454 caja add option to turn off generic icons in listview #26 caja Update caja integration with tracker search engine tracker dev documentation - Nautilus git log engrampa add libarchive support #52 libmatekbd Consider dropping libmatekbd for libgnomekbd libmateweather Consider dropping libmateweather for libgweather mate-applets add mount point or device blacklist for drivemount applet #24 mate-applets option to show several cores and processors in one cpufreq applet instance #50 mate-applets make cpufreq applet work with intel_pstate driver #173 mate-control-center cache thumbnails for desktop backgrounds in appearance properties mate-menus option to enable/disable preferences categories #35 mate-session-manager in properties dialog, show running apps that can/will be saved on exit #113 pluma add plugin to show (and maybe change) line endings type #50 General Tasks This are some general tasks for future releases, that are not specific to a certain package:\n"},{"id":38,"href":"/developers-corner/wayland-meson/","title":"Wayland and Meson","parent":"Developers Corner","content":" Status of Wayland and Meson support Here we track some packages status of the current support for the Wayland protocol and the Meson build system.\nPackage Name Wayland Support Meson Support atril \u0026#x2705; finished \u0026#x1f532; not started yet caja \u0026#x2705; finished \u0026#x1f532; not started yet engrampa \u0026#x2705; finished \u0026#x2705; finished eom \u0026#x2705; finished \u0026#x2705; finished mate-calc \u0026#x2705; finished \u0026#x2705; finished mate-applets: \u0026#x2705; finished \u0026#x1f532; not started yet mate-control-center \u0026#x2705; finished \u0026#x2705; finished mate-desktop \u0026#x2705; finished \u0026#x2705; finished mate-media: \u0026#x2705; finished \u0026#x2705; finished mate-notification-daemon: \u0026#x2705; finished \u0026#x1f532; not started yet mate-panel: \u0026#x2705; finished \u0026#x1f532; not started yet mate-polkit: \u0026#x2705; finished \u0026#x2705; finished mate-sensors-applet \u0026#x2705; finished \u0026#x1f532; not started yet mate-system-monitor \u0026#x2705; finished \u0026#x2705; finished mate-terminal \u0026#x2705; finished \u0026#x2705; finished mate-utils \u0026#x2705; finished \u0026#x1f532; not started yet mozo \u0026#x2705; finished \u0026#x2705; finished pluma \u0026#x2705; finished \u0026#x1f532; not started yet ","description":" Status of Wayland and Meson support Here we track some packages status of the current support for the Wayland protocol and the Meson build system.\nPackage Name Wayland Support Meson Support atril \u0026#x2705; finished \u0026#x1f532; not started yet caja \u0026#x2705; finished \u0026#x1f532; not started yet engrampa \u0026#x2705; finished \u0026#x2705; finished eom \u0026#x2705; finished \u0026#x2705; finished mate-calc \u0026#x2705; finished \u0026#x2705; finished mate-applets: \u0026#x2705; finished \u0026#x1f532; not started yet mate-control-center \u0026#x2705; finished \u0026#x2705; finished mate-desktop \u0026#x2705; finished \u0026#x2705; finished mate-media: \u0026#x2705; finished \u0026#x2705; finished mate-notification-daemon: \u0026#x2705; finished \u0026#x1f532; not started yet mate-panel: \u0026#x2705; finished \u0026#x1f532; not started yet mate-polkit: \u0026#x2705; finished \u0026#x2705; finished mate-sensors-applet \u0026#x2705; finished \u0026#x1f532; not started yet mate-system-monitor \u0026#x2705; finished \u0026#x2705; finished mate-terminal \u0026#x2705; finished \u0026#x2705; finished mate-utils \u0026#x2705; finished \u0026#x1f532; not started yet mozo \u0026#x2705; finished \u0026#x2705; finished pluma \u0026#x2705; finished \u0026#x1f532; not started yet "},{"id":39,"href":"/introduction/contributing/","title":"Contributing","parent":"Introduction","content":"This page describes how to contribute to the MATE Desktop Environment.\nWelcome Contact IRC Welcome Hi! We are the MATE Desktop Team and we are glad you found your way to this page. We always need new people who want to help. Help can be done in many several ways and everyone can help in one way or another. Yes, we said everyone, because the MATE Desktop is composed of so many different bits and pieces; not finding anything that suits you is almost impossible. The most important thing is that you are motivated and have a willingness to learn.\nTo make the initial steps as easy as possible for you, we set up some tutorials. Currently there are tutorials for artwork and themes for software development and for translation.\nContact If you have any questions do not hesitate to come and ask us.\nIRC All MATE channels are on the irc.libera.chat server.\nWebchat: https://web.libera.chat/?#mate\nMatrix: https://matrix.to/#/#mate:libera.chat\nThey are also available on the libera.chat Matrix server.\nMain channel\n#mate - Main MATE channel (discussion, support, bugs, installation help) Other channels\n#mate-dev - Development related discussions channel #debian-mate - Channel for MATE packaging for Debian on [irc.oftc.net](https://www.oftc.net/) server. #fedora-mate - Channel for MATE packaging for Fedora #msb - Channel for MATE packaging for Slackware #opensuse-mate - Channel for MATE packaging for openSUSE #ubuntu-mate - Channel for Ubuntu MATE Remix project ","description":"This page describes how to contribute to the MATE Desktop Environment.\nWelcome Contact IRC Welcome Hi! We are the MATE Desktop Team and we are glad you found your way to this page. We always need new people who want to help. Help can be done in many several ways and everyone can help in one way or another. Yes, we said everyone, because the MATE Desktop is composed of so many different bits and pieces; not finding anything that suits you is almost impossible. The most important thing is that you are motivated and have a willingness to learn.\n"},{"id":40,"href":"/contributing/software-development/first-contribution/","title":"First Contribution","parent":"Software Development","content":"If you are looking to make your first contribution, follow the steps below.\nFork the repository Clone the repository Create a branch Make some changes and commit those changes Push changes to GitHub Submit your changes for review Fork the repository Fork the repository by clicking on the fork button on the top of the Github page of the MATE package. This will create a copy of this repository in your account.\nClone the repository Now clone the forked repository to your machine. Go to your GitHub account, open the forked repository, click on the code button and then click the copy to clipboard icon.\nOpen a terminal and run the following git command:\ngit clone url-you-just-copied where url-you-just-copied is the url to this repository (your fork of this project).\nFor example:\ngit clone https://github.com/this-is-you/mate-calc where this-is-you is your GitHub username. Here you\u0026rsquo;re copying the contents of the repository on GitHub to your computer.\nCreate a branch Change to the repository directory on your computer (if you are not already there).\nNow create a branch using the git checkout command:\ngit checkout -b your-new-branch-name For example:\ngit checkout -b better-factorization Make some changes and commit those changes Now open the source code files that you would like to change in a text editor.\nMake some changes. To test if your changes are working correctly you probably need to build and install the project.\nIf you go to the project directory and execute the command git status, you\u0026rsquo;ll see there are changes.\nAdd those changes to the branch you just created using the git add command:\ngit add modified-file.c Replace modified-file.c with the name of the file you actually edited.\nNow commit those changes using the git commit command:\ngit commit -m \u0026#34;Commit Message\u0026#34; replacing Commit Message with something meaningful that describes your changes.\nPush changes to GitHub Push your changes using the command git push:\ngit push origin add-your-branch-name replacing add-your-branch-name with the name of the branch you created earlier.\nSubmit your changes for review If you go to your repository on GitHub, you\u0026rsquo;ll see a Compare \u0026amp; pull request button. Click on that button.\nNow submit the pull request.\n","description":"If you are looking to make your first contribution, follow the steps below.\nFork the repository Clone the repository Create a branch Make some changes and commit those changes Push changes to GitHub Submit your changes for review Fork the repository Fork the repository by clicking on the fork button on the top of the Github page of the MATE package. This will create a copy of this repository in your account.\n"},{"id":41,"href":"/mate-desktop/","title":"MATE Desktop","parent":"Welcome to the documentation","content":"","description":""},{"id":42,"href":"/contributing/software-development/building-and-installing/","title":"Building and Installing","parent":"Software Development","content":"To run the newest version of a MATE project, often it is not enough to build it from source (i.e. it can not be executed with ./my-program). To work properly it need to be installed, because the installation process ensures that all the needed files are copied to the right places.\nBuilding Installing Uninstall Building First make sure you have all dependencies of the package installed:\nDebian/Ubuntu/Linux Mint $ sudo apt build-dep \u0026lt;package-name\u0026gt; Fedora $ sudo dnf builddep \u0026lt;package-name\u0026gt; All MATE applications are built in the same way:\n$ git submodule update --init --recursive # Init Git submodules $ ./autogen.sh --prefix=/usr # Build configuration $ make # Build Installing Warning: This procedure doesn\u0026rsquo;t install in a separate prefix, so it may overwrite your system binaries.\nAfter building the package you may install it:\n[ Become root if necessary ] $ make install # Installation Uninstall To uninstall just do:\n[ Become root if necessary ] $ make uninstall ","description":"To run the newest version of a MATE project, often it is not enough to build it from source (i.e. it can not be executed with ./my-program). To work properly it need to be installed, because the installation process ensures that all the needed files are copied to the right places.\nBuilding Installing Uninstall Building First make sure you have all dependencies of the package installed:\n"},{"id":43,"href":"/contributing/software-development/c-gobject-programming/","title":"C Programming/GObject","parent":"Software Development","content":"Although written in C, most MATE applications are heavily based on Object Oriented Programming principles.\nSince the C Programming-Language was not created with Object Oriented Programming in mind, it has no explicit support for classes, inheritance, polymorphism and other OO Concepts. Neither does it have its own Virtual Table, which is found in object-oriented languages such C++, Java and C#. Therefore, it might not be as easy to implement an object-oriented programming paradigm using only C\u0026rsquo;s language features and standard library. However, it can be done using structures which contain both function pointers as well as data, for example, or by using third-party libraries.\nThere are many third-party libraries designed to add support for object-oriented programming in C. The most general-purpose and widely used among these is the GObject System, which is part of Glib. The GObject System comes with its own virtual table. To create an object in C using the GObject system, it has to be sub-classed from the GObject struct.\nObject-Creation Declaring An Object Boiler-Plate Code Defining The Object Static Functions The Constructor Object-Usage Inheritance Concept Object-Creation In this example a new object will be implemented directly derived from GObject. For simplicity, the object is named MyObject.\nDeclaring An Object To create a simple non-derivable (final) object, two structs must be declared, the instance and the class. They are declared using a macro:\n/* in myobject.h */ G_DECLARE_FINAL_TYPE (MyObject, my_object, MY, OBJECT, GObject) This declares two structures, MyObject and MyObjectClass. MyObject must be defined in the C implementation, and MyObjectClass is already defined by the macro.\nBoiler-Plate Code Since the GObject System is just a third-party library and therefore cannot make any changes to the C Language itself, creating a new object requires a lot of boiler-plate code. This is mostly handled by the macro shown above. However, the following is also required:\n/* in myobject.h */ #define MY_TYPE_OBJECT my_object_get_type () The macro defines several functions, namely MY_OBJECT () and MY_OBJECT_CLASS (), used for casting, MY_IS_OBJECT () and MY_IS_OBJECT_CLASS () for testing whether an object or class is of the correct type and MY_OBJECT_GET_CLASS () for getting the class structure from an instance.\nDefining The Object Before use, the newly created object must be defined, along with the instance structure.\n/* in myobject.c */ struct _MyObject { GObject parent_instance; /* other members */ }; G_DEFINE_TYPE (MyObject, my_object, G_TYPE_OBJECT) Static Functions There are a few static functions that may or may not to be defined, depending on your object. For a minimal object these ones are compulsory:\n/* in myobject.c */ static void my_object_class_init (MyObjectClass *klass) { /* code */ } static void my_object_init (MyObject *self) { /* code */ } The Constructor There is no internal way of allocating memory for an object in C. Therefore an explicit constructor must be declared for the new object.\n/* in myobject.c */ GObject * my_object_new (void) { return g_object_new (MY_TYPE_OBJECT, 0); } Object-Usage Although creating the object using its own pointer-type is perfectly valid, it is recommended to use the pointer-type of the object at the top of the hierarchy i.e the furthest off base class. The newly created object may now be used like this:\n/* in main.c */ /* Note: GObject is at the top of the hierarchy. */ /* declaration and construction */ GObject *myobj = my_object_new (); /* destruction */ g_object_unref (myobj); Inheritance Concept Inheritance is one of the most widely used and useful OO Concepts. It provides an efficient way to reuse existing code by wrapping it up into an object and then sub-classing it. The new classes are known as derived classes. Many object hieriarchies can be created using inheritance. Inheritance is also one of the most efficient ways of abstracting code. Implementation\nIn the GObject System, inheritance can be achieved by sub-classing GObject. Since C provides no keyword or operator for inheritance, a derived object is usually made by declaring the base instance and base class as a member of the derived instance and derived class respectively. In C code:\n/* derived object instance */ struct _DerivedObject { /* the base instance is a member of the derived instance */ BaseObject parent_instance; }; Source: https://en.wikibooks.org/wiki/C_Programming/GObject\n","description":"Although written in C, most MATE applications are heavily based on Object Oriented Programming principles.\nSince the C Programming-Language was not created with Object Oriented Programming in mind, it has no explicit support for classes, inheritance, polymorphism and other OO Concepts. Neither does it have its own Virtual Table, which is found in object-oriented languages such C++, Java and C#. Therefore, it might not be as easy to implement an object-oriented programming paradigm using only C\u0026rsquo;s language features and standard library. However, it can be done using structures which contain both function pointers as well as data, for example, or by using third-party libraries.\n"},{"id":44,"href":"/contributing/","title":"Contributing","parent":"Welcome to the documentation","content":"","description":""},{"id":45,"href":"/contributing/software-development/debugging-with-eclipse/","title":"Debugging with Eclipse","parent":"Software Development","content":"This page details the generic process for debugging the MATE desktop environment with Eclipse IDE.\nSetting up the development environment Enabling the debug of a MATE component Debugging a MATE component To debug an application that is running To debug an application by launching it Setting up the development environment The installation of the development environment can be done anywhere, on this page we will install it on user home folder.\nThe installation process involves downloading the Eclipse IDE for C/C++ Developers package from https://www.eclipse.org/downloads/packages/, installing the IDE in the ~/eclipse folder, and running the script to install the debugging plugin in the ~/cdtdebugger folder.\nBefore you begin this procedure, make sure you have a java runtime environment installed on your system.\nDownload Eclipse IDE for C/C++ Developers package from https://www.eclipse.org/downloads/packages/ on your home folder. Extract the tarball on your home folder. After performing this step the IDE will be installed in the folder ~/eclipse: $ tar xzvf eclipse-cpp-2019-12-R-linux-gtk-x86_64.tar.gz Install the debugger plugin on your home folder. After performing this step the debugger plugin will be installed in the folder ~/cdtdebugger: $ chmod +x ./eclipse/plugins/org.eclipse.cdt.debug.application_1.1.400.201910171407/scripts/install.sh $ ./eclipse/plugins/org.eclipse.cdt.debug.application_1.1.400.201910171407/scripts/install.sh To start the debugger, just run the command below:\n$ ~/cdtdebugger/cdtdebug.sh Enabling the debug of a MATE component The generic way to enable debug is to set the debugging flag and disable optimizations on the configuration process, which is performed before the make.\nIn the example below we want to install Caja with debugging enabled, for doing this we will first have to download a copy of the source code, then we will have to configure it with debugging enabled and finally we will install it on the system.\nDownload the source code of Caja: $ git clone https://github.com/mate-desktop/caja.git Configure with debugging enabled (-g) and without optimizations (-O0): $ CFLAGS=\u0026#34;-g -O0\u0026#34; ./autogen.sh --prefix=/usr Build $ make Install $ sudo make install TIP: Before performing the second step, all build dependencies must be installed, you can use your favorite package manager to do so. On Fedora you can run:\n$ sudo dnf builddep caja Debugging a MATE component This is without a doubt the key point as it may vary depending on the component you want to debug. There are two possible cases. Debug an application that is running or debug an application by launching it.\nTo debug an application that is running Run the command below:\n$ ~/cdtdebugger/cdtdebug.sh -a PID Example:\n$ ~/cdtdebugger/cdtdebug.sh -a $(pgrep caja) Or you can also run the ~/cdtdebugger/cdtdebug.sh without any arguments, close Debug New Executable dialog, select File -\u0026gt; Debug Attached Executable from main menu and select the process on next dialog.\nYou will need to terminate any running process before debugging a newly installed binary.\nIf you want to debug a library, just debug the component that uses it and add the library on the executables list. Let\u0026rsquo;s say we want to debug the Caja plugin \u0026ldquo;image-converter\u0026rdquo;, and we installed and enabled the debugging of:\nhttps://github.com/mate-desktop/caja.git https://github.com/mate-desktop/caja-extensions.git First we start the debugging of the Caja process:\n$ ~/cdtdebugger/cdtdebug.sh -a $(pgrep caja) Then we import the file /usr/lib64/caja/extensions-2.0/libcaja-image-converter.so into the executable tab.\nTo add a breakpoint just click on libcaja-image-converter.so in the Executables tab, double click on a Source File Name row to show the content of file, and press Shift+Control+B to toggle a breakpoint on the desired line.\nTIP: You can debug marco through a remote connection:\n$ ssh -Y user@host $ ~/cdtdebugger/cdtdebug.sh -a $(pgrep marco) To debug an application by launching it Run the command below:\n$ ~/cdtdebugger/cdtdebug.sh -e EXEC ARGS Example:\n$ ~/cdtdebugger/cdtdebug.sh -e /usr/bin/engrampa --add-to=backup.tar.gz ~/caja In the example above, engrampa was installed with debugging enabled:\nhttps://github.com/mate-desktop/engrampa.git To add a breakpoint just click on engrampa in the Executables tab, double click on a Source File Name row to show the content of file, and press Shift+Control+B to toggle a breakpoint on the desired line.\nIf the executable does not appear in the list you can import it.\n","description":"This page details the generic process for debugging the MATE desktop environment with Eclipse IDE.\nSetting up the development environment Enabling the debug of a MATE component Debugging a MATE component To debug an application that is running To debug an application by launching it Setting up the development environment The installation of the development environment can be done anywhere, on this page we will install it on user home folder.\n"},{"id":46,"href":"/developers-corner/","title":"Developers Corner","parent":"Welcome to the documentation","content":"","description":""},{"id":47,"href":"/contributing/artwork-and-themes/","title":"Artwork and Themes","parent":"Contributing","content":"","description":""},{"id":48,"href":"/contributing/software-development/","title":"Software Development","parent":"Contributing","content":"","description":""},{"id":49,"href":"/contributing/translation/","title":"Translation","parent":"Contributing","content":"","description":""},{"id":50,"href":"/mate-desktop/applications/","title":"Applications","parent":"MATE Desktop","content":"","description":""},{"id":51,"href":"/mate-desktop/components/","title":"Components","parent":"MATE Desktop","content":"","description":""},{"id":52,"href":"/mate-desktop/libraries/","title":"Libraries","parent":"MATE Desktop","content":"","description":""},{"id":53,"href":"/en/","title":"En","parent":"Welcome to the documentation","content":"","description":""},{"id":54,"href":"/tags/","title":"Tags","parent":"Welcome to the documentation","content":"","description":""},{"id":55,"href":"/","title":"Welcome to the documentation","parent":"","content":"MATE is a fork of the now unmaintained GNOME 2. MATE provides an intuitive and attractive desktop environment using traditional metaphors for Linux and other Unix-like operating systems.\nMATE is under active development to add support for new technologies while preserving a traditional desktop experience. MATE also supports running the environment without compositing, making MATE a suitable choice for lower-end hardware.\nFeature overview Traditional Yet Modern Support for modern technologies while preserving a traditional desktop experience.\nLight and Fast Get the most out of your computer.\nEasy Customization Do not hesitate exploring endless options and tweaking every little detail of the Desktop.\nSane Defaults Easy and perfectly usable out of the box, even for beginners.\nGood Documentation Every application comes with its own help dialogue. Furthermore there are lots of online tutorials.\nEasy Accessible Featured built-in accessibility support.\n","description":"MATE is a fork of the now unmaintained GNOME 2. MATE provides an intuitive and attractive desktop environment using traditional metaphors for Linux and other Unix-like operating systems.\nMATE is under active development to add support for new technologies while preserving a traditional desktop experience. MATE also supports running the environment without compositing, making MATE a suitable choice for lower-end hardware.\nFeature overview Traditional Yet Modern Support for modern technologies while preserving a traditional desktop experience.\n"}]